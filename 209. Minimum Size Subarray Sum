209. Minimum Size Subarray Sum

Given an array of positive integers nums and a positive integer target, return the minimal length of a 
subarray
 whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

 

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1
Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0
 

Constraints:

1 <= target <= 109
1 <= nums.length <= 105
1 <= nums[i] <= 104


Java

class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int left = 0;
        int sum = 0;
        int minLen = Integer.MAX_VALUE;

        for (int right = 0; right < nums.length; right++) {
            sum += nums[right];

            while (sum >= target) {
                minLen = Math.min(minLen, right - left + 1);
                sum -= nums[left];
                left++;
            }
        }

        return minLen == Integer.MAX_VALUE ? 0 : minLen;
    }
}
Explanation:

Initialization:

left: Pointer to the beginning of the current subarray.
sum: Sum of elements in the current subarray.
minLen: Stores the minimum length of the subarray found so far (initialized to maximum integer value).
Sliding Window:

Iterate through the array using right pointer:
Add nums[right] to sum.
While sum is greater than or equal to target:
Update minLen with the current subarray length (right - left + 1).
Subtract nums[left] from sum to shrink the window.
Move left pointer to the right.
Return Result:

If minLen is still Integer.MAX_VALUE, it means no subarray with sum greater than or equal to target was found, so return 0.
Otherwise, return minLen.
Time Complexity: O(n)

The outer loop iterates through the array once.
The inner loop (while loop) also iterates at most n times in total, as left can only move forward.
Space Complexity: O(1)

No extra data structures are used beyond the variables left, sum, and minLen.
