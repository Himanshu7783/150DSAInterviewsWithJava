56. Merge Intervals

Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104

Java

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Solution {
    public int[][] merge(int[][] intervals) {
        if (intervals == null || intervals.length <= 1) {
            return intervals;
        }

        // Sort intervals by start time
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        List<int[]> merged = new ArrayList<>();
        merged.add(intervals[0]);

        for (int i = 1; i < intervals.length; i++) {
            int[] currentInterval = intervals[i];
            int[] lastMergedInterval = merged.get(merged.size() - 1);

            if (currentInterval[0] <= lastMergedInterval[1]) {
                // Overlapping intervals, merge
                lastMergedInterval[1] = Math.max(lastMergedInterval[1], currentInterval[1]);
            } else {
                // Non-overlapping intervals, add current interval to merged list
                merged.add(currentInterval);
            }
        }

        return merged.toArray(new int[merged.size()][]);
    }
}
Explanation:

Handle Edge Cases:

If the input intervals array is null or has only one interval, return it as is.
Sort Intervals:

Sort the intervals array based on the start time of each interval. This is crucial for efficiently merging overlapping intervals.
We use Arrays.sort with a lambda expression to define the sorting criteria.
Initialize Merged List:

Create an ArrayList called merged to store the merged intervals.
Add the first interval from the sorted intervals array to merged as the initial interval.
Iterate and Merge:

Iterate through the intervals array starting from the second interval (index 1).
For each currentInterval, get the lastMergedInterval from the merged list.
Check for Overlap:
If the start time of the currentInterval is less than or equal to the end time of the lastMergedInterval, it means the intervals overlap.
In this case, merge the intervals by updating the end time of the lastMergedInterval to be the maximum of its current end time and the end time of the currentInterval.
No Overlap:
If the intervals do not overlap, add the currentInterval to the merged list.
Convert to Array:

Convert the merged ArrayList to a 2D int[][] array using toArray() and return it.
How it Works:

The algorithm relies on the fact that after sorting the intervals by their start times, any overlapping intervals will be adjacent to each other.
By iterating through the sorted intervals and comparing each interval with the last merged interval, we can efficiently identify and merge overlapping intervals.

Example Walkthrough (Example 1):

Input: [[1,3],[2,6],[8,10],[15,18]]
Sort: [[1,3],[2,6],[8,10],[15,18]] (already sorted)
Initialize: merged = [[1,3]]
Iteration:
[2,6] overlaps with [1,3], so merged becomes [[1,6]].
[8,10] does not overlap with [1,6], so merged becomes [[1,6],[8,10]].
[15,18] does not overlap with [8,10], so merged becomes [[1,6],[8,10],[15,18]].
Output: [[1,6],[8,10],[15,18]]
