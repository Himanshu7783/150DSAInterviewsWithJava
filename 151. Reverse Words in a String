151. Reverse Words in a String

Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

 

Example 1:

Input: s = "the sky is blue"
Output: "blue is sky the"
Example 2:

Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.
Example 3:

Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.
 

Constraints:

1 <= s.length <= 104
s contains English letters (upper-case and lower-case), digits, and spaces ' '.
There is at least one word in s.
 

Follow-up: If the string data type is mutable in your language, can you solve it in-place with O(1) extra space?


Java

public class Solution {
    public String reverseWords(String s) {
        // 1. Remove leading and trailing spaces
        s = s.trim();

        // 2. Split the string into words based on multiple spaces
        String[] words = s.split("\\s+"); 

        // 3. Reverse the order of words
        StringBuilder reversed = new StringBuilder();
        for (int i = words.length - 1; i >= 0; i--) {
            reversed.append(words[i]);
            if (i > 0) {
                reversed.append(" "); 
            }
        }

        return reversed.toString();
    }
}
Explanation:

Remove leading and trailing spaces:

The trim() method removes any leading or trailing whitespace characters from the given string.
Split the string into words:

s.split("\\s+") splits the string into an array of words.
"\\s+" is a regular expression that matches one or more whitespace characters.
Reverse the order of words:

A StringBuilder is used to efficiently construct the reversed string.
The loop iterates through the words array in reverse order.
Each word is appended to the StringBuilder.
A single space is added between words, except for the last word.
Return the reversed string:

The toString() method of the StringBuilder returns the final reversed string.
Time Complexity:

Splitting the string into words using split() takes O(n) time in the worst case.
Reversing the order of words and constructing the new string also takes O(n) time.
Space Complexity:

The words array and the StringBuilder both require O(n) extra space in the worst case.
This approach provides a clear and concise solution to the problem using a brute-force method in Java.
