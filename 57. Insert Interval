57. Insert Interval

You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti.
You are also given an interval newInterval = [start, end] that represents the start and end of another interval.

Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).

Return intervals after the insertion.

Note that you don't need to modify intervals in-place. You can make a new array and return it.

 

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
 

Constraints:

0 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 105
intervals is sorted by starti in ascending order.
newInterval.length == 2
0 <= start <= end <= 105

Java

import java.util.ArrayList;
import java.util.List;

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        List<int[]> result = new ArrayList<>();
        int i = 0;
        int n = intervals.length;

        // Add intervals that come before the newInterval
        while (i < n && intervals[i][1] < newInterval[0]) {
            result.add(intervals[i]);
            i++;
        }

        // Merge overlapping intervals
        int[] mergedInterval = new int[]{newInterval[0], newInterval[1]};
        while (i < n && intervals[i][0] <= newInterval[1]) {
            mergedInterval[0] = Math.min(mergedInterval[0], intervals[i][0]);
            mergedInterval[1] = Math.max(mergedInterval[1], intervals[i][1]);
            i++;
        }
        result.add(mergedInterval);

        // Add intervals that come after the newInterval
        while (i < n) {
            result.add(intervals[i]);
            i++;
        }

        // Convert List to int[][]
        return result.toArray(new int[result.size()][2]);
    }
}
Explanation:

Initialization:

Create an ArrayList called result to store the merged intervals.
Initialize i to 0 to iterate through the intervals array.
initialize n to the length of the intervals array.
Add Intervals Before newInterval:

Iterate through intervals until we find an interval that overlaps with newInterval or reach the end of intervals.
If intervals[i][1] < newInterval[0], it means the current interval is completely before newInterval. So, add it to result.
Merge Overlapping Intervals:

Create mergedInterval to store the merged interval. Initialize it with newInterval.
Iterate through intervals as long as intervals[i][0] <= newInterval[1], which means there's an overlap.
Update mergedInterval by taking the minimum of the start points and the maximum of the end points of the overlapping intervals.
increment i.
add the merged interval to the result list.
Add Intervals After newInterval:

Add the remaining intervals (those that come after newInterval and don't overlap) to result.
Convert to int[][]:

Convert the ArrayList result to a 2D int[][] array using result.toArray(new int[result.size()][2]).
Example Usage:

Java

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        int[][] intervals1 = {{1, 3}, {6, 9}};
        int[] newInterval1 = {2, 5};
        int[][] result1 = solution.insert(intervals1, newInterval1);
        printIntervals(result1); // Output: [[1, 5], [6, 9]]

        int[][] intervals2 = {{1, 2}, {3, 5}, {6, 7}, {8, 10}, {12, 16}};
        int[] newInterval2 = {4, 8};
        int[][] result2 = solution.insert(intervals2, newInterval2);
        printIntervals(result2); // Output: [[1, 2], [3, 10], [12, 16]]
    }

    public static void printIntervals(int[][] intervals) {
        System.out.print("[");
        for (int i = 0; i < intervals.length; i++) {
            System.out.print("[" + intervals[i][0] + ", " + intervals[i][1] + "]");
            if (i < intervals.length - 1) {
                System.out.print(", ");
            }
        }
        System.out.println("]");
    }
}
Time and Space Complexity:

Time Complexity: O(n), where n is the number of intervals. We iterate through the intervals array at most three times.
Space Complexity: O(n) in the worst case, as we create a new ArrayList to store the merged intervals.
