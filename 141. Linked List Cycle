141. Linked List Cycle

Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, 
pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.

 

Example 1:


Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).
Example 2:


Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.
Example 3:


Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.
 

Constraints:

The number of the nodes in the list is in the range [0, 104].
-105 <= Node.val <= 105
pos is -1 or a valid index in the linked-list.

Java

/**
 * Definition for singly-linked list.
 * class ListNode {
 * int val;
 * ListNode next;
 * ListNode(int x) {
 * val = x;
 * next = null;
 * }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        if (head == null || head.next == null) {
            return false;
        }

        ListNode slow = head;
        ListNode fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;

            if (slow == fast) {
                return true;
            }
        }

        return false;
    }
}
Explanation: 1  Â  
1.
github.com
github.com

Initialization:

We start by checking if the head is null or head.next is null. If either of these is true, there cannot be a cycle, so we return false.
We initialize two pointers, slow and fast, both pointing to the head of the linked list.
Floyd's Cycle-Finding Algorithm (Tortoise and Hare):

We enter a while loop that continues as long as fast is not null and fast.next is not null. This ensures we don't encounter a NullPointerException when accessing fast.next.next.
Inside the loop:
We move slow one step at a time (slow = slow.next).
We move fast two steps at a time (fast = fast.next.next).
We check if slow and fast have met (slow == fast). If they have, it means there's a cycle, and we return true.
No Cycle:

If the loop finishes without slow and fast meeting, it means fast reached the end of the list (or the node before the end), indicating that there's no cycle. In this case, we return false.
Time and Space Complexity:

Time Complexity: O(n), where n is the number of nodes in the linked list. In the worst case, the fast pointer will traverse the entire list.
Space Complexity: O(1), as we only use two pointers (slow and fast), which require constant extra space. This satisfies the follow-up requirement.
