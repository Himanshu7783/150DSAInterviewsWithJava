274. H-Index

Hint
Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher's h-index.

According to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.

 

Example 1:

Input: citations = [3,0,6,1,5]
Output: 3
Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.
Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.
Example 2:

Input: citations = [1,3,1]
Output: 1
 

Constraints:

n == citations.length
1 <= n <= 5000
0 <= citations[i] <= 1000

SOLUTION: 

class Solution {
    public int hIndex(int[] citations) {
        int n = citations.length;
        int[] count = new int[n + 1]; 

        // Count the number of papers with at least 'i' citations.
        for (int c : citations) {
            if (c >= n) {
                count[n]++;
            } else {
                count[c]++;
            }
        }

        // Find the h-index.
        int total = 0;
        for (int i = n; i >= 0; i--) {
            total += count[i];
            if (total >= i) {
                return i;
            }
        }

        return 0;
    }
}

 EXPLAIONATION: 

Initialization:

Create a count array of size n + 1 to store the number of papers with at least i citations, where i ranges from 0 to n.
Count Papers:

Iterate through the citations array:
If a citation value c is greater than or equal to n, increment count[n]. This means there's at least one paper with n or more citations.
Otherwise, increment count[c]. This means there's at least one paper with c citations.
Find h-Index:

Iterate through the count array from n down to 0:
Add the current count[i] to the total.
If total is greater than or equal to i, it means there are at least i papers with at least i citations. Return i as the h-index.
Return 0:

If no h-index is found, return 0.
Time Complexity:

O(n): The code iterates through the citations array once and the count array once, both of which have a length of n.
Space Complexity:

O(n): The count array uses extra space proportional to the number of citations.
