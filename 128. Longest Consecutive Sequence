128. Longest Consecutive Sequence

Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

 

Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9
Example 3:

Input: nums = [1,0,1,2]
Output: 3
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109

Java

import java.util.HashSet;
import java.util.Set;

class Solution {
    public int longestConsecutive(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }

        Set<Integer> numSet = new HashSet<>();
        for (int num : nums) {
            numSet.add(num);
        }

        int longestStreak = 0;

        for (int num : nums) {
            // Check if this number is the start of a sequence
            if (!numSet.contains(num - 1)) {  // If num-1 does not exist, then num is the start of a sequence
                int currentNum = num;
                int currentStreak = 1;

                while (numSet.contains(currentNum + 1)) {
                    currentNum++;
                    currentStreak++;
                }

                longestStreak = Math.max(longestStreak, currentStreak);
            }
        }

        return longestStreak;
    }
}
Explanation and Key Improvements:

HashSet for Efficient Lookups: The code uses a HashSet called numSet to store all the numbers from the input array nums.  HashSets provide O(1) average time complexity for contains() 
operations, which is crucial for achieving the required O(n) time complexity.

Finding the Start of a Sequence: The core idea is to iterate through the numbers in nums. For each number num, it checks if num - 1 exists in the numSet. If num - 1 does not exist,
it means that num is potentially the starting point of a consecutive sequence.  This is the key optimization. We only start checking sequences from their beginning.

Calculating the Streak: If a number num is the start of a sequence, the code enters a while loop.  It checks for num + 1, num + 2, and so on, in the numSet,
incrementing the currentStreak as long as consecutive numbers are found.

Updating the Longest Streak: The longestStreak is updated in each iteration of the outer loop using Math.max() to keep track of the longest consecutive sequence found so far.

Handling Empty or Null Input: The code now includes a check at the beginning to handle cases where the input array nums is null or empty. This makes the solution more robust.

O(n) Time Complexity: The code iterates through the nums array at most twice (once to populate the HashSet and once to find the sequences).
The inner while loop, although it looks nested, does not increase the time complexity beyond O(n).  This is because the while loop only executes for each starting element of a sequence,
and each element in nums can be part of at most one sequence.  Therefore, the total number of operations within the while loop across all starting elements will also be at most n.
The HashSet operations are O(1) on average.  Thus, the overall time complexity remains O(n).

O(n) Space Complexity: The space complexity is O(n) due to the HashSet which, in the worst case, can store all the elements of the input array.

Example Usage:

Java

public static void main(String[] args) {
    Solution solution = new Solution();
    int[] nums1 = {100, 4, 200, 1, 3, 2};
    System.out.println(solution.longestConsecutive(nums1)); // Output: 4

    int[] nums2 = {0, 3, 7, 2, 5, 8, 4, 6, 0, 1};
    System.out.println(solution.longestConsecutive(nums2)); // Output: 9

    int[] nums3 = {1,0,1,2};
    System.out.println(solution.longestConsecutive(nums3)); // Output: 3

    int[] nums4 = {};
    System.out.println(solution.longestConsecutive(nums4)); // Output: 0

    int[] nums5 = null;
    System.out.println(solution.longestConsecutive(nums5)); // Output: 0
}
