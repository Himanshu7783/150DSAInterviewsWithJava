12. Integer to Roman

Seven different symbols represent Roman numerals with the following values:

Symbol	Value
I	1
V	5
X	10
L	50
C	100
D	500
M	1000
Roman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:

If the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.
If the value starts with 4 or 9 use the subtractive form representing one symbol subtracted from the following symbol, for example, 4 is 1 (I) less than 5 (V): IV and 9 is 1 (I) less than 10 (X): IX. Only the following subtractive forms are used: 4 (IV), 9 (IX), 40 (XL), 90 (XC), 400 (CD) and 900 (CM).
Only powers of 10 (I, X, C, M) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5 (V), 50 (L), or 500 (D) multiple times. If you need to append a symbol 4 times use the subtractive form.
Given an integer, convert it to a Roman numeral.

 

Example 1:

Input: num = 3749

Output: "MMMDCCXLIX"

Explanation:

3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M)
 700 = DCC as 500 (D) + 100 (C) + 100 (C)
  40 = XL as 10 (X) less of 50 (L)
   9 = IX as 1 (I) less of 10 (X)
Note: 49 is not 1 (I) less of 50 (L) because the conversion is based on decimal places
Example 2:

Input: num = 58

Output: "LVIII"

Explanation:

50 = L
 8 = VIII
Example 3:

Input: num = 1994

Output: "MCMXCIV"

Explanation:

1000 = M
 900 = CM
  90 = XC
   4 = IV
 

Constraints:

1 <= num <= 3999

Java

class Solution {
    public String intToRoman(int num) {
        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
        String[] symbols = {"M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I"};

        StringBuilder roman = new StringBuilder();
        int i = 0;

        while(num > 0) {
            if(num >= values[i]) {
                roman.append(symbols[i]);
                num -= values[i];
            } else {
                i++;
            }
        }

        return roman.toString();
    }
}
Explanation:

Initialization:

values: An array containing the integer values for each Roman numeral symbol.
symbols: An array containing the corresponding Roman numeral symbols for each integer value.
roman: A StringBuilder to efficiently build the Roman numeral string.
i: An index to iterate through the values and symbols arrays.
Iteration:

The while loop continues as long as num is greater than 0.
In each iteration:
If num is greater than or equal to the current values[i]:
Append the corresponding symbols[i] to the roman StringBuilder.
Subtract values[i] from num.
If num is less than values[i], increment the index i to move to the next smaller value.
Return Result:

After the loop completes, the roman StringBuilder contains the Roman numeral representation of the input integer.
Return the roman.toString() to get the final result as a String.
Key Points:

The values and symbols arrays are carefully ordered to ensure the correct subtraction and concatenation of Roman numerals.
The use of a StringBuilder improves efficiency compared to repeated string concatenation.
This approach is based on the greedy algorithm, where at each step, the largest possible Roman numeral symbol is chosen and subtracted from the remaining value.
This solution effectively converts an integer to its Roman numeral representation within the given constraints.
