55. Jump Game

You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 105

Solution : 

class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        int reach = 0; // Maximum reachable index

        for (int i = 0; i < n; i++) {
            // If we can't reach the current index, it's impossible to reach the end
            if (i > reach) {
                return false;
            }

            // Update the maximum reachable index
            reach = Math.max(reach, i + nums[i]);

            // If we can reach the last index, we're done
            if (reach >= n - 1) {
                return true;
            }
        }

        return false;
    }
}

Java

class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        int reach = 0; // Maximum reachable index

        for (int i = 0; i < n; i++) {
            // If we can't reach the current index, it's impossible to reach the end
            if (i > reach) {
                return false;
            }

            // Update the maximum reachable index
            reach = Math.max(reach, i + nums[i]);

            // If we can reach the last index, we're done
            if (reach >= n - 1) {
                return true;
            }
        }

        return false;
    }
}
This code implements a greedy approach to solve the Jump Game problem. Here's a breakdown of how it works:

Initialization:

n: Stores the length of the nums array.
reach: Initializes to 0, representing the farthest index we can reach initially.
Iterating through the array:

Check Reachability: If the current index i is greater than reach, it means we cannot reach this index, and therefore, we cannot reach the end. In this case, we return false.
Update Reachable Index: We calculate the maximum reachable index from the current position by adding nums[i] to i. We update reach to the maximum of its current value and the newly calculated reachable index.
Early Termination: If reach is greater than or equal to n - 1, it means we can reach the last index, so we return true.
Final Return: If the loop completes without returning true, it means we cannot reach the end, so we return false.

This solution efficiently determines whether it's possible to reach the last index of the array by iterating through the array only once and keeping track of the maximum reachable index at each step.
