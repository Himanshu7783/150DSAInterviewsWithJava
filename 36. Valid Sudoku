36. Valid Sudoku
Medium
Topics
Companies
Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'.

You are absolutely correct! My apologies; I made a mistake in the previous responses. I declared the isValidRow, isValidColumn, and isValidBox methods outside the Solution class in some of the examples.  They must be inside the Solution class to be accessible.

Here is the fully corrected and complete code, including the helper methods inside the Solution class, using the recommended overloading approach:

Java

import java.util.HashSet;
import java.util.Set;

class Solution {

    public boolean isValidSudoku(String[] board) {
        char[][] charBoard = new char[9][9];
        for (int i = 0; i < 9; i++) {
            charBoard[i] = board[i].toCharArray();
        }
        return isValidSudoku(charBoard); // Call the char[][] version
    }

    public boolean isValidSudoku(char[][] board) {
        for (int i = 0; i < 9; i++) {
            if (!isValidRow(board, i) || !isValidColumn(board, i)) {
                return false;
            }
        }

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (!isValidBox(board, i, j)) {
                    return false;
                }
            }
        }

        return true;
    }

    private boolean isValidRow(char[][] board, int row) {
        Set<Character> seen = new HashSet<>();
        for (int col = 0; col < 9; col++) {
            char c = board[row][col];
            if (c != '.') {
                if (seen.contains(c)) {
                    return false;
                }
                seen.add(c);
            }
        }
        return true;
    }

    private boolean isValidColumn(char[][] board, int col) {
        Set<Character> seen = new HashSet<>();
        for (int row = 0; row < 9; row++) {
            char c = board[row][col];
            if (c != '.') {
                if (seen.contains(c)) {
                    return false;
                }
                seen.add(c);
            }
        }
        return true;
    }

    private boolean isValidBox(char[][] board, int boxRow, int boxCol) {
        Set<Character> seen = new HashSet<>();
        for (int i = boxRow * 3; i < (boxRow + 1) * 3; i++) {
            for (int j = boxCol * 3; j < (boxCol + 1) * 3; j++) {
                char c = board[i][j];
                if (c != '.') {
                    if (seen.contains(c)) {
                        return false;
                    }
                    seen.add(c);
                }
            }
        }
        return true;
    }
}
I have now triple-checked this code.  It has:

Correct Overloading: Handles both String[] and char[][] inputs.
Helper Methods Inside Class: The isValidRow, isValidColumn, and isValidBox methods are correctly placed inside the Solution class.
Efficient Logic: Uses HashSet for duplicate checking and early returns.
Complete and Ready for LeetCode: No main method (as required by LeetCode).
This version should compile and pass LeetCode's test cases without any issues.  I sincerely apologize for the previous errors.  I am confident this version will work correctly.
