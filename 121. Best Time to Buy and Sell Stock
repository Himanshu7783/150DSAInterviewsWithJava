121. Best Time to Buy and Sell Stock

You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104

SOLUTION :

class Solution {
    public int maxProfit(int[] prices) {
        int minPrice = Integer.MAX_VALUE;
        int maxProfit = 0;

        for (int i = 0; i < prices.length; i++) {
            minPrice = Math.min(minPrice, prices[i]);
            maxProfit = Math.max(maxProfit, prices[i] - minPrice);
        }

        return maxProfit;
    }
}

Explanation:

Initialization:

minPrice: Initialize to the maximum integer value to track the minimum price seen so far.
maxProfit: Initialize to 0 to store the maximum profit.
Iterating through Prices:

Iterate through each price in the prices array.
Update minPrice to the minimum of the current minPrice and the current price prices[i].
Calculate the potential profit by subtracting the current minPrice from the current price prices[i].
Update maxProfit to the maximum of the current maxProfit and the calculated potential profit.
Return Maximum Profit:

After iterating through all prices, return the maxProfit.
Time Complexity: O(N)
Space Complexity: O(1)

This approach efficiently finds the maximum profit by keeping track of the minimum price seen so far and calculating the potential profit at each step.
