452. Minimum Number of Arrows to Burst Balloons

There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend]
denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.

Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. 
There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.

Given the array points, return the minimum number of arrows that must be shot to burst all balloons.

 

Example 1:

Input: points = [[10,16],[2,8],[1,6],[7,12]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].
- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].
Example 2:

Input: points = [[1,2],[3,4],[5,6],[7,8]]
Output: 4
Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows.
Example 3:

Input: points = [[1,2],[2,3],[3,4],[4,5]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].
- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].
 

Constraints:

1 <= points.length <= 105
points[i].length == 2
-231 <= xstart < xend <= 231 - 1

Java

import java.util.Arrays;

class Solution {
    public int findMinArrowShots(int[][] points) {
        if (points == null || points.length == 0) {
            return 0;
        }

        Arrays.sort(points, (a, b) -> Integer.compare(a[1], b[1]));

        int arrows = 1;
        int end = points[0][1];

        for (int i = 1; i < points.length; i++) {
            if (points[i][0] > end) {
                arrows++;
                end = points[i][1];
            }
        }

        return arrows;
    }
}
Explanation:

Handle Empty Input:

If the input array points is null or empty, return 0 because no arrows are needed.
Sort by End Points:

Sort the points array based on the end points (xend) of the balloons in ascending order. This is crucial for the greedy approach.
Arrays.sort(points, (a, b) -> Integer.compare(a[1], b[1])); does this sorting.
Sorting by end points allows us to maximize the number of balloons burst by a single arrow.
Greedy Approach:

Initialize arrows to 1 because we'll always need at least one arrow if there are balloons.
Initialize end to the end point of the first balloon (points[0][1]). This represents the rightmost point where the current arrow can burst balloons.
Iterate Through Balloons:

Iterate through the points array starting from the second balloon (index 1).
For each balloon:
If the start point of the current balloon (points[i][0]) is greater than the current end, it means this balloon cannot be burst by the current arrow.
In this case, we need a new arrow:
Increment arrows.
Update end to the end point of the current balloon (points[i][1]).
If the start point of the current balloon is less than or equal to the current end, it means the current balloon can be burst by the current arrow, so we don't need to do anything.
Return Result:

After iterating through all the balloons, return the arrows count, which represents the minimum number of arrows needed.
Why this greedy approach works:

By sorting the balloons by their end points, we ensure that we always choose the arrow position that can burst the maximum number of balloons that have the earliest end points.
If a subsequent balloon's start point is within the range of the current arrow's burst, it means we can burst it with the same arrow.
If a subsequent balloon's start point is beyond the range of the current arrow, it means we need a new arrow, and we place it at the end point of this new balloon to maximize its effectiveness.
This approach ensures that we minimize the number of arrows used.
The use of Integer.compare is used to avoid integer overflow issues that can occur when simply subtracting two integers.
