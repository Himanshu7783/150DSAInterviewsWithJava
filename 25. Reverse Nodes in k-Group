25. Reverse Nodes in k-Group

Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:


Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000
 

Follow-up: Can you solve the problem in O(1) extra memory space?

Alright, let's tackle reversing nodes in k-groups within a linked list. Here's a Java approach that keeps the extra memory to a minimum (ideally O(1) if we're careful!).

The core idea is to iterate through the list in chunks of size k. For each chunk, we'll reverse the nodes within that chunk and then connect it back to the rest of the list.

Here's how you can do it:

Java

/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || k <= 1) {
            return head;
        }

        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prevGroupEnd = dummy;

        while (true) {
            ListNode kthNode = findKthNode(prevGroupEnd, k);
            if (kthNode == null) {
                break; // Not enough nodes for a full group
            }

            ListNode current = prevGroupEnd.next;
            ListNode nextGroupStart = kthNode.next;

            // Reverse the k-group
            ListNode prev = null;
            ListNode curr = current;
            ListNode next = null;
            for (int i = 0; i < k; i++) {
                next = curr.next;
                curr.next = prev;
                prev = curr;
                curr = next;
            }

            // Connect the reversed group
            prevGroupEnd.next = kthNode;
            current.next = nextGroupStart;
            prevGroupEnd = current;
        }

        return dummy.next;
    }

    private ListNode findKthNode(ListNode start, int k) {
        ListNode current = start;
        for (int i = 0; i < k && current != null; i++) {
            current = current.next;
        }
        return current;
    }
}
Let's break down what's happening here:

reverseKGroup(ListNode head, int k):

Handles the base cases: an empty list or k being less than or equal to 1 means no reversal is needed, so we return the original head.
We introduce a dummy node. This simplifies the logic, especially when dealing with the head of the list. The dummy node points to the original head.
prevGroupEnd keeps track of the end of the previously reversed group. Initially, it's the dummy node.
The while (true) loop continues as long as we can find groups of size k.
findKthNode(ListNode start, int k):

This helper function takes a starting node and k as input.
It traverses k nodes from the start node.
If it reaches k nodes, it returns the k 
th
  node.
If it encounters the end of the list before reaching k nodes, it returns null, indicating that there aren't enough nodes for a full group.
Inside the while loop:

We find the k 
th
  node using findKthNode. If it's null, we break out of the loop because the remaining nodes should stay as they are.
current points to the beginning of the current k-group (right after prevGroupEnd).
nextGroupStart points to the node immediately following the current k-group.
Reversing the k-group: We use the standard iterative linked list reversal technique within the for loop (similar to reversing a single linked list). prev, curr, and next pointers help us achieve this.
Connecting the reversed group:
prevGroupEnd.next = kthNode;: We connect the end of the previous reversed group to the new head of the reversed k-group (which is kthNode after reversal).
current.next = nextGroupStart;: We connect the tail of the reversed k-group (which is the original current) to the start of the next group.
prevGroupEnd = current;: We update prevGroupEnd to be the tail of the newly reversed group, so we can start the process for the next group.
return dummy.next;: Finally, we return the next of the dummy node, which is the head of the modified linked list.

Time and Space Complexity:

Time Complexity: O(n), where n is the number of nodes in the linked list. We traverse the list multiple times, but each node is visited a constant number of times.
Space Complexity: O(1) extra space. We are only using a constant number of extra pointers (dummy, prevGroupEnd, current, nextGroupStart, prev, curr, next).
We are not using any auxiliary data structures that scale with the input size.
