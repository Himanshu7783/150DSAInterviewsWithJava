167. Two Sum II - Input Array Is Sorted

Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

 

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].
Example 2:

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].
Example 3:

Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].
 

Constraints:

2 <= numbers.length <= 3 * 104
-1000 <= numbers[i] <= 1000
numbers is sorted in non-decreasing order.
-1000 <= target <= 1000
The tests are generated such that there is exactly one solution.


Python

class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        """
        Finds indices of two numbers in a sorted array that sum to a target.

        Args:
            numbers: A sorted list of integers.
            target: The target sum.

        Returns:
            A list containing the 1-indexed indices of the two numbers.
        """
        left, right = 0, len(numbers) - 1

        while left < right:
            sum_ = numbers[left] + numbers[right]

            if sum_ == target:
                return [left + 1, right + 1]
            elif sum_ < target:
                left += 1
            else:
                right -= 1

        return []  # No solution found
Explanation:

Initialization:

left: Pointer starting at the beginning of the array.
right: Pointer starting at the end of the array.
Iteration:

While left is less than right:
Calculate the sum_ of the numbers at left and right.
If sum_ equals the target:
Return the 1-indexed indices of left and right as a list.
If sum_ is less than the target:
Move left one position to the right.
If sum_ is greater than the target:
Move right one position to the left.
No Solution:

If the loop completes without finding a solution, return an empty list.
Key Points:

Two Pointers: The algorithm utilizes the two-pointer approach, efficiently traversing the sorted array from both ends.
Constant Space: The solution uses only constant extra space (pointers and variables), satisfying the space complexity requirement.
Sorted Array: The sorted nature of the array is crucial for this approach to work effectively.
This solution effectively addresses the given problem and fulfills all the requirements.
