167. Two Sum II - Input Array Is Sorted

Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

 

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].
Example 2:

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].
Example 3:

Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].
 

Constraints:

2 <= numbers.length <= 3 * 104
-1000 <= numbers[i] <= 1000
numbers is sorted in non-decreasing order.
-1000 <= target <= 1000
The tests are generated such that there is exactly one solution.


Java

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        for (int i = 0; i < numbers.length; i++) {
            for (int j = i + 1; j < numbers.length; j++) {
                if (numbers[i] + numbers[j] == target) {
                    return new int[]{i + 1, j + 1}; // 1-indexed indices
                }
            }
        }
        return new int[]{-1, -1}; // No solution found
    }
}
Explanation:

Initialization:

Two nested loops are used to iterate through all possible pairs of numbers in the array.
The outer loop (i) iterates from the beginning of the array.
The inner loop (j) starts from the element after the current i.
Check for Target Sum:

Inside the inner loop, the sum of numbers[i] and numbers[j] is calculated.
If the sum equals the target:
An array containing the 1-indexed indices of the two numbers (i + 1 and j + 1) is returned.
No Solution:

If the loops complete without finding a pair that sums to the target, an array containing -1 and -1 is returned to indicate no solution.
Time Complexity:

The time complexity of this brute-force approach is O(n^2) due to the nested loops.
Space Complexity:

The space complexity is O(1) as it only uses constant extra space for variables.
Note:

This brute-force solution is not the most efficient for this problem, as it has a quadratic time complexity.
For a sorted array, the two-pointer approach (as shown in the previous responses) provides a more efficient solution with O(n) time complexity.
