11. Container With Most Water

Hint
You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
 

Constraints:

n == height.length
2 <= n <= 105
0 <= height[i] <= 104

Java

class Solution {
    public int maxArea(int[] height) {
        int left = 0;
        int right = height.length - 1;
        int maxArea = 0;

        while (left < right) {
            int h = Math.min(height[left], height[right]);
            int w = right - left;
            int area = h * w;
            maxArea = Math.max(maxArea, area);

            if (height[left] <= height[right]) {
                left++;
            } else {
                right--;
            }
        }

        return maxArea;
    }
}
Explanation:

Initialization:

maxArea: A variable to store the maximum area found so far, initialized to 0.
Nested Loops:

The outer loop (i) iterates through each line in the array.
The inner loop (j) iterates through the lines to the right of the current line.
Calculate Area:

For each pair of lines (i and j):
Calculate the height of the container: h = Math.min(height[i], height[j]). The height is limited by the shorter line.
Calculate the width of the container: w = j - i.
Calculate the current area: area = h * w.
Update Maximum Area:

Update maxArea if the current area is greater than the previous maximum: maxArea = Math.max(maxArea, area).
Return Maximum Area:

After iterating through all possible pairs of lines, return the maxArea.
Time Complexity: O(n^2) due to the nested loops.
Space Complexity: O(1) as it uses constant extra space.

This is a brute-force approach that checks all possible pairs of lines. There are more efficient approaches like the two-pointer method that can solve this problem in O(n) time complexity.
