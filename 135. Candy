135. Candy

There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.

 

Example 1:

Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.
Example 2:

Input: ratings = [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
The third child gets 1 candy because it satisfies the above two conditions.
 

Constraints:

n == ratings.length
1 <= n <= 2 * 104
0 <= ratings[i] <= 2 * 104


Java

class Solution {
    public int candy(int[] ratings) {
        int n = ratings.length;
        int[] leftToRight = new int[n]; 
        int[] rightToLeft = new int[n];

        // Initialize all children with at least one candy
        Arrays.fill(leftToRight, 1);
        Arrays.fill(rightToLeft, 1);

        // Traverse from left to right
        for (int i = 1; i < n; i++) {
            if (ratings[i] > ratings[i - 1]) {
                leftToRight[i] = leftToRight[i - 1] + 1; 
            }
        }

        // Traverse from right to left
        for (int i = n - 2; i >= 0; i--) {
            if (ratings[i] > ratings[i + 1]) {
                rightToLeft[i] = rightToLeft[i + 1] + 1;
            }
        }

        // Calculate the maximum candies for each child
        int totalCandies = 0;
        for (int i = 0; i < n; i++) {
            totalCandies += Math.max(leftToRight[i], rightToLeft[i]);
        }

        return totalCandies;
    }
}
Explanation:

Initialization:

Create two arrays leftToRight and rightToLeft to store the number of candies for each child when traversing from left to right and right to left, respectively.
Initialize both arrays with 1, as each child must have at least one candy.
Left to Right Traversal:

Iterate through the ratings array from left to right.
If the current child's rating is higher than the previous child's rating, increase the number of candies for the current child in the leftToRight array by 1.
Right to Left Traversal:

Iterate through the ratings array from right to left.
If the current child's rating is higher than the next child's rating, increase the number of candies for the current child in the rightToLeft array by 1.
Calculate Total Candies:

Iterate through both arrays and determine the maximum number of candies required for each child based on both left-to-right and right-to-left considerations.
Sum up all the maximum candies to get the total number of candies needed.
Return Total Candies:

Return the calculated totalCandies.
Time Complexity:

The time complexity of this solution is O(n), where n is the number of children.
Space Complexity:

The space complexity is O(n) due to the use of two additional arrays to store intermediate results.
